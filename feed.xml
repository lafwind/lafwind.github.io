<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lafwind's blog</title>
  <subtitle>A developer...</subtitle>
  <id>http://lafwind.github.io</id>
  <link href="http://lafwind.github.io"/>
  <link href="http://lafwind.github.io/feed.xml" rel="self"/>
  <updated>2015-03-15T21:13:00+08:00</updated>
  <author>
    <name>Lafwind</name>
  </author>
  <entry>
    <title>如何为Github上的开源项目贡献代码</title>
    <link rel="alternate" href="http://lafwind.github.io/contributing-to-open-source-on-github.html"/>
    <id>http://lafwind.github.io/contributing-to-open-source-on-github.html</id>
    <published>2015-03-15T21:13:00+08:00</published>
    <updated>2015-03-16T21:01:50+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;以前一直只将Github作为自己的代码仓库，当然也start了好多项目，但却从未尝试过它的另一个重要功能：协作开发。当然，为开源项目贡献代码一直是自己想做的，之所以未曾做过，主要原因是没信心，觉得自己能力还不够，拖着拖着就到现在了（和写博客有异曲同工之处= =）。而之所以现在开始的原因嘛，很直接，不想拖了！当然担心还是有的，不过谁不是一步一步开始的呢~~ &lt;/p&gt;

&lt;p&gt;下文讲的是向开源项目提交代码的流程，尽量简洁。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;假设你所要贡献代码的开源项目为&lt;strong&gt;A&lt;/strong&gt;，具体流程如下：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1 查看项目的CONTRIBUTING。这是项目所有者所希望的贡献者参与项目和提交代码时的规范。一般在项目里或README介绍里会有该文件或该内容。应根据这些内容来执行下面的步骤。比如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork it&lt;/li&gt;
&lt;li&gt;Create your feature branch (git checkout -b my-new-feature)&lt;/li&gt;
&lt;li&gt;Commit your changes (git commit -am &amp;lsquo;Add some feature&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;Push to the branch (git push origin my-new-feature)&lt;/li&gt;
&lt;li&gt;Create new Pull Request&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;2 Fork该项目。到该项目github页面上，点击位于右上角的&lt;code&gt;Fork&lt;/code&gt;按钮。此后该项目就会出现在自己的repo页，称为&lt;strong&gt;B&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;3 回到自己的github repo页，将自己fork的项目（&lt;strong&gt;B&lt;/strong&gt;）clone到本地。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/YOURNAME/YOURFORK.git &lt;span class="c"&gt;# (B)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4 设定一个远端upstream repo，此时即原始的项目&lt;strong&gt;A&lt;/strong&gt;。因为之后你修改的代码是要回到这里的，这也才能达到贡献的目的。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git &lt;span class="c"&gt;# (A)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成上述两个步骤后，可以使用以下命令，看看有没有添加完成：&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;git remote -v &lt;span class="c"&gt;#应该看到fork后自己的repo和公共项目的repo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5 同步远端上游库（upstream repo，即&lt;strong&gt;A&lt;/strong&gt;），这能让你的代码保持最新。之后如持续为项目提交代码，应时常进行该同步。 
  &amp;ldquo;`shell
  $ git fetch upstream&lt;/p&gt;

&lt;p&gt;# 回到自己的master分支
  $ git checkout master&lt;/p&gt;

&lt;p&gt;# 合并刚刚同步的upstream/master 最新版本
  $ git merge upstream/master
  &amp;rdquo;`&lt;/p&gt;

&lt;p&gt;6 为该项目建立一个feature分支。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="nv"&gt;$ &lt;/span&gt;git checkout -b feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7 修改或添加代码。&lt;/p&gt;

&lt;p&gt;8 commit 并 push 到自己的远端仓库（即&lt;strong&gt;B&lt;/strong&gt;）。此时你可以选择push这feature分支，或者将它合到你的master分支再提交都可。具体应该参考这个项目的CONTRIBUTING。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="c"&gt;# 先git add 和 git commit&lt;/span&gt;
  &lt;span class="nv"&gt;$ &lt;/span&gt;git push -u origin feature &lt;span class="c"&gt;# 取决于CONTRIBUTING或你&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9 然后回到自己的github页面，在branch选择部分选取自己刚修改的那个分支。选完后点选左边绿色按钮。这时开始&lt;code&gt;pull request&lt;/code&gt;。这时会看到自己修改后的代码分支和upstrean（&lt;strong&gt;A&lt;/strong&gt;）的比较页面。如没问题，直接提交。&lt;/p&gt;

&lt;p&gt;填写一些相应信息（如自己的这个feature分支解决了什么问题或有什么功能等）。&lt;/p&gt;

&lt;p&gt;以上就是提交代码的整个流程。如再有新的提交重复5-9即可。&lt;/p&gt;

&lt;p&gt;执行好上述几个步骤即可以为开源项目提交代码。不过如果想见到这些修改真的合并到这个主项目。你还需要等待项目所有者的审核。如果ok，那就皆大欢喜。不ok的话，则你还可在继续修改，继续提交。一切由你。&lt;/p&gt;

&lt;p&gt;还有注意的是，经常看issue（可能是一些bug反馈，一些项目建议什么的）和pull request（并不是自己去pull request，而是看别人的，点击项目右边的相应链接，在code栏下），可以更好的融入到该项目的节奏中，也更好的达到协作开发的目的。推荐Github官方出品的&lt;a href="https://guides.github.com/activities/contributing-to-open-source/"&gt;教程&lt;/a&gt;，更好的了解协作过程中的“礼仪”。&lt;/p&gt;

&lt;p&gt;好了，开始享受这份乐趣吧!&lt;/p&gt;

&lt;p&gt;如下是参考链接：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://guides.github.com/activities/contributing-to-open-source/"&gt;Contributing to Open Source on GitHub（官方guide）&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/"&gt;Configuring a remote for a fork&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;Syncing a fork&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;Creating a pull request&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>CSS学习笔记(1) --- Position，Font</title>
    <link rel="alternate" href="http://lafwind.github.io/thinking-in-css.html"/>
    <id>http://lafwind.github.io/thinking-in-css.html</id>
    <published>2015-03-14T17:36:00+08:00</published>
    <updated>2015-03-14T21:40:53+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;最近这几天都在折腾这个博客，所谓折腾，无非就是页面样式的设计和调整~而趁着这个机会，也好好的把CSS学习和实践了一下，在此记录下一些心得。&lt;/p&gt;

&lt;h3&gt;Position&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;position&lt;/code&gt;是CSS布局的核心属性，对元素盒子应用这个属性，可以从新定位该元素在文档流中的位置。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;position&lt;/code&gt;属性有四个值，分别是&lt;code&gt;static&lt;/code&gt;，&lt;code&gt;relative&lt;/code&gt;， &lt;code&gt;absolute&lt;/code&gt;， &lt;code&gt;fixed&lt;/code&gt;。其中&lt;code&gt;static&lt;/code&gt;为默认属性。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;static&lt;/code&gt;情况下，元素处于常规文档流中，在页面中会自上而下堆叠（此时他们都是块级元素（&lt;code&gt;block&lt;/code&gt;）），即最普通无任何花俏的排列。&lt;/p&gt;

&lt;p&gt;而&lt;code&gt;relative&lt;/code&gt;、即相对定位下，该元素则会相对它本应该出现的位置进行定位，此时可用&lt;code&gt;top&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;、&lt;code&gt;bottom&lt;/code&gt;、&lt;code&gt;left&lt;/code&gt;来指定相应距离，一般情况下&lt;code&gt;top&lt;/code&gt;和&lt;code&gt;left&lt;/code&gt;就可实现所需效果（距离可用负数）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; &lt;em&gt;使用相对定位&lt;code&gt;relative&lt;/code&gt;后，页面上除了这个元素相对于自己的位置挪动后，其他元素位置没任何变化，该元素占据的空间也留着没动。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;absolute&lt;/code&gt;即绝对定位，它与上述两种不同，它会把元素彻底从文档流中拿出来！（上述两种不会！）即该元素本来占据的空间&lt;em&gt;会被回收&lt;/em&gt;，而后相对于&lt;code&gt;body&lt;/code&gt;元素进行定位（&lt;code&gt;top&lt;/code&gt;等）。这其中有一个重要概念，&lt;em&gt;定位上下文&lt;/em&gt;。所谓&lt;em&gt;定位上下文&lt;/em&gt;，即参照物，为该元素参照&lt;em&gt;何物&lt;/em&gt;来利用&lt;code&gt;top&lt;/code&gt;等属性进行定位。在绝对定位中，元素默认的定位上下文是&lt;code&gt;body&lt;/code&gt;元素，而非其在文档中本来的位置（相对定位的定位上下文是其本来位置）。也因此，随着页面滚动，为了维护与&lt;code&gt;body&lt;/code&gt;的相对位置关系，该元素也会滚动。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;重要：&lt;code&gt;body&lt;/code&gt;之所以是绝对定位的默认定位上下文，是因为&lt;code&gt;body&lt;/code&gt;是标记中所有元素唯一的祖先元素，而实际上&lt;strong&gt;绝对定位元素的任何祖先元素都可以成为它的定位上下文，只要把相应的祖先元素的&lt;code&gt;position&lt;/code&gt;设定为&lt;code&gt;relative&lt;/code&gt;即可&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fixed&lt;/code&gt;定位和绝对定位&lt;code&gt;absolute&lt;/code&gt;类似，也是将元素从整个文档流中移出，其占据的空间也被收回。而其与绝对定位不同的一点在于，它的定位上下文是视口（浏览器窗口或移动设备屏幕），所以即使页面滚动，该元素也不会滚动（屏幕还在那呢~~）。&lt;/p&gt;

&lt;h3&gt;Font&lt;/h3&gt;

&lt;p&gt;关于font，其实没啥好谈的，主要即是设定大小、粗细、何种字体等。这些东西网上也都有。而之所以还为此开了个小标题主要是觉得一个网页的字体设置对于网页给人的感觉影响还是蛮大的。在此推荐一篇文章：&lt;a href="https://ruby-china.org/topics/14005"&gt;Web 中文字体应用指南&lt;/a&gt;，里面详细讲了如何为网页设置中英文字体，很酷。&lt;/p&gt;

&lt;p&gt;还有，现在在字体方面，web font也是一个蛮好的选择，比如google font。但由于某神秘原因，国内暂时无法使用= =，不过你也可以点击&lt;a href="http://libs.useso.com/"&gt;这里&lt;/a&gt;，是否继续使用，选择权在你。&lt;/p&gt;

&lt;p&gt;最后是关于根据不同语言设置不同字体的一个方法，主要是利用CSS中的&lt;code&gt;@font-face&lt;/code&gt;，以下是一个例子：&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'MyFont'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('path/to/font')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'etc:truetype'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'MyFont'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('path/to/font')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'etc:truetype'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c"&gt;/* 指定该src的字体所要应用的字符的范围。以下范围指定中文字符。*/&lt;/span&gt;
  &lt;span class="py"&gt;unicode-range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="err"&gt;+&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="n"&gt;E00-9FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* 应用 */&lt;/span&gt;
&lt;span class="nt"&gt;ele&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'MyFont'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另一个适用于中英文使用不同字体的方法是在声明&lt;code&gt;font-family&lt;/code&gt;时，英文在前，中文在后，比如：&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ele&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tahoma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STXihei&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"华文细黑"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Microsoft YaHei"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"微软雅黑"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样设置原因是大部分中文字体里包含英文字母（大部分不好看），而英文字体里不包含中文字符。在应用字体时，英文字符会使用优先级较高（排在前面）的那些英文字体，而中文字符由于前几个字体不适用于中文字符，会不断向后寻找，直到找到优先级最高的（排最前面）中文字体，具体可参考上述推荐&lt;a href="https://ruby-china.org/topics/14005"&gt;文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;有一个要注意的点是，中文字体还是就根据各操作系统已有的来使用，这样页面渲染得较快。当然你也可以为了使页面在不同系统下面呈现一致的效果而将字体也放上服务器，然后再利用&lt;code&gt;@font-face&lt;/code&gt;来引入，这样的确能达到这一目的，但代价却是你不得不忍受刚打开页面时持续一段时间的一大片一大片的空白（亲身经历~）。原因嘛，中文字库太大了= =&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>植一棵大树！</title>
    <link rel="alternate" href="http://lafwind.github.io/arbor-day.html"/>
    <id>http://lafwind.github.io/arbor-day.html</id>
    <published>2015-03-12T14:55:00+08:00</published>
    <updated>2015-03-13T17:11:32+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="arbor-day-tree" src="img/2015-03-12-arbor-day-01.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;今天开始正式写博客。恰逢植树节，以此为题。&lt;/p&gt;

&lt;p&gt;关于博客，很早很早以前就曾写过。那时大概0607年，从百度空间开始。一开始只是一些心情随笔，现在回过头看，只道当时真年轻！那段时期持续的时间不长，原因是自己的注意力从文字转移到博客的界面上。瞎捣鼓了一通后，反而没了写字的心性，便以此作罢。&lt;/p&gt;

&lt;p&gt;再之后，大概09年，偶然接触了Google Reader（&lt;em&gt;致我们终将逝去的青春&lt;/em&gt;），然后见到了太多的独立博客，那颗平静的心再次骚动。从Blogger开始，到自己找空间，找域名，利用wordpress建站，修改网站主题，最后网站建好了。这其中的喜悦是有的。但故事的结局是，博客仅仅写了一篇= = ……，现在想来，大概原因有以下几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不清楚自己写博客的初衷，或者说，驱动力并非源自在博客上散发自己的想法，而是独立建站的那种很cool的感觉，所以当网站建好，那股劲过去了，也就失去了源动力。（需求不清晰）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;见了太多的珠玉在前，反而缺少了下笔的勇气，通俗点讲就是，我怎么忍心让我这一坨文字去瞎了这世界的眼睛。现在想想，简直天真得善良。这世界瞧不瞧得见你还两说，咋就开始担心会破坏地球安宁了呢~&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还没准备好。或许这是根本的原因。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到了11年末，接触了技术，发现了太多大牛的技术博客，又开始了不安分，不过估摸着还是由于上面三个原因，一直没行动。转眼谁家小孩都从呱呱落地到开始上幼稚园，我还是一笔未动。中间于去年5月建了这个博客，但仍处于准备中= =，其实自己也不知道在准备着啥。&lt;/p&gt;

&lt;p&gt;到了今天，离建站好像差不多10个月吧，这个年龄段的小孩估摸着也正处于开始说话的阶段，而这个博客，也应该是时候不留白了。&lt;/p&gt;

&lt;p&gt;至于这个&lt;em&gt;应该是时候&lt;/em&gt;从何得来（说白了，就是为啥现在想开始写文章了:D），几个原因吧：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我想和这个和这个世界谈谈。这话这句号有点让人恐高~ 降低点格调的说法就是，我想谈谈，然后假装整个世界都在听我扯，至于到底如何，那就如何吧~&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好记性不如烂笔头。有些想法、有些感悟、有些经验总得记下来，不然过段时间被新事物冲刷了就忘了，以后再想，又得从头来过，何必浪费大好时光，况且还有种从前回忆被哈士奇叼走的挫败感。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我已经冥冥中浪费了和一批小孩子们说这个博客年龄比你们还大的大好装×机会了，不能再浪费另一批了！&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;吾有一怀表，曰情。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后是关于博客的内容，大体是关于&lt;em&gt;技术&lt;/em&gt;、&lt;em&gt;生活&lt;/em&gt;上的一些感想吧，当然也&lt;strong&gt;不会拘泥于此&lt;/strong&gt;，总之想谈的、想说的都会写，不局限，不约束。&lt;/p&gt;

&lt;p&gt;我想种一棵参天大树！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hello, World!</title>
    <link rel="alternate" href="http://lafwind.github.io/Hello-World.html"/>
    <id>http://lafwind.github.io/Hello-World.html</id>
    <published>2014-05-06T08:00:00+08:00</published>
    <updated>2015-03-11T20:43:44+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;welcome&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello, World!"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the first post by &lt;em&gt;Lafwind&lt;/em&gt; :D&lt;/p&gt;
</content>
  </entry>
</feed>
