<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lafwind's blog</title>
  <subtitle>A developer...</subtitle>
  <id>http://lafwind.github.io</id>
  <link href="http://lafwind.github.io"/>
  <link href="http://lafwind.github.io/feed.xml" rel="self"/>
  <updated>2016-07-17T18:13:00+08:00</updated>
  <author>
    <name>Lafwind</name>
  </author>
  <entry>
    <title>Ruby 中的 self</title>
    <link rel="alternate" href="http://lafwind.github.io/blog/self-in-ruby.html"/>
    <id>http://lafwind.github.io/blog/self-in-ruby.html</id>
    <published>2016-07-17T18:13:00+08:00</published>
    <updated>2016-07-17T20:29:00+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;“知人者智，自知者明”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为人处事当如此，在 Ruby 代码中是亦如此。清楚 &lt;code&gt;self&lt;/code&gt; 为何物有助于更好地理解和写出正确的 Ruby 代码。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;self&lt;/code&gt; 在 Ruby 程序中代表着此时所处位置的当前对象。而具体位置可分以下几种情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在实例方法中，此时 &lt;code&gt;self&lt;/code&gt; 指向调用该方法的对象&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不在类中的方法内，&lt;code&gt;self&lt;/code&gt; 指向顶级上下文 &lt;code&gt;main&lt;/code&gt; 对象&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在类中， 但不在实例方法中，此时 &lt;code&gt;self&lt;/code&gt; 指向当前的类（因此此时定义的变量为类实例变量，是属于这个类的）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;即不在类中，也不在方法内，此时 &lt;code&gt;self&lt;/code&gt; 指向顶级上下文 &lt;code&gt;main&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在块内，&lt;code&gt;self&lt;/code&gt; 所指与此块外层的 &lt;code&gt;self&lt;/code&gt;所指一致&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下为例：&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="c1"&gt;# main&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# main&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m1&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="c1"&gt;# A&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# A&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;m&lt;/span&gt;
    &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;m1&lt;/span&gt; &lt;span class="c1"&gt;# 输出两行，皆为 main&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;m&lt;/span&gt; &lt;span class="c1"&gt;# 输出两行，皆指向 a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上就是 &lt;code&gt;self&lt;/code&gt; 在程序中各位置所指的具体对象，明白了这点，对于 Ruby 代码中各种方法、变量的归属也会有更清晰的认识，对代码也就有了更高的掌控。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S.1：&lt;/em&gt; 除了当前对象 &lt;code&gt;self&lt;/code&gt;，Ruby 中还有当前类的存在，定义方法时，该方法会成为当前类的实例方法（单件方法另说）。当用 &lt;code&gt;class&lt;/code&gt; 打开一个类时，这个类就成了当前类。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S.2：&lt;/em&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 例子来自《Ruby 元编程》&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_one&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_two&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="s1"&gt;'Hello!'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method_one&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method_two&lt;/span&gt; &lt;span class="c1"&gt;# "Hello!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时 &lt;code&gt;method_two&lt;/code&gt; 所属的类是 &lt;code&gt;MyClass&lt;/code&gt;，这也就是为什么在顶级作用域中定义的方法会成为 Object（&lt;code&gt;main&lt;/code&gt; 对象的类） 类实例方法的原因。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>在 DaoCloud（Docker） 上部署 Rails 应用</title>
    <link rel="alternate" href="http://lafwind.github.io/blog/deploy-rails-in-daocloud-docker.html"/>
    <id>http://lafwind.github.io/blog/deploy-rails-in-daocloud-docker.html</id>
    <published>2016-07-12T22:25:00+08:00</published>
    <updated>2016-07-13T21:55:19+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;前几日 Rails 5 正式发布，便用其写了个小的&lt;a href="http://lafwind-chat.daoapp.io/"&gt;聊天室&lt;/a&gt;（&lt;a href="https://github.com/lafwind/chat"&gt;源码&lt;/a&gt;），当然，中间用到了 ActionCable。应用写完想着像之前的其他应用一样把它部署到 Heroku 上面，但发现当需要安装相应的 Redis add-on 时，需要进行信用卡方面的账号核实，而自己本身又没有信用卡= =，所以这一想法算是泡汤了。经过上网查询，发现将其放在 DaoCloud 上是个不错的想法，遂决定实行。&lt;/p&gt;

&lt;h3&gt;正文&lt;/h3&gt;

&lt;p&gt;由于把应用部署到 DaoCloud 需先生成一个 Docker 镜像，而 DaoCloud 在这方面已经帮你准备得差不多，只需要自己写一份 Dockerfile，配置一下所需的环境，这点倒不难，对 Dockerfile 相关指令（查&lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;文档&lt;/a&gt;，或找一份&lt;a href="https://github.com/lafwind/chat/blob/master/Dockerfile"&gt;样本&lt;/a&gt;看一下）和命令行熟悉的应该一下就上手了。以下是我为这次项目写的 Dockerfile：&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
FROM ubuntu:14.04
MAINTAINER Lafwind Li "lafwind@gmail.com"

RUN apt-get update
# 使用 postgresql 需要安装 libpq-dev、postgresql，如使用其他数据库，根据需要安装其他库
RUN apt-get -y install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev libpq-dev postgresql

# 安装 nodejs, rails 需要 javascript runtime
RUN curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
RUN apt-get install -y nodejs
ENV PATH /usr/bin/nodejs:$PATH
RUN nodejs -v

RUN cd

# 用 rbenv 安装 ruby
RUN git clone https://github.com/rbenv/rbenv.git /root/.rbenv
RUN git clone https://github.com/rbenv/ruby-build.git /root/.rbenv/plugins/ruby-build
RUN ./root/.rbenv/plugins/ruby-build/install.sh
ENV PATH /root/.rbenv/bin:$PATH
RUN echo 'eval "$(rbenv init -)"' &amp;gt;&amp;gt; /etc/profile.d/rbenv.sh
RUN echo 'eval "$(rbenv init -)"' &amp;gt;&amp;gt; .bashrc
RUN echo 'eval "$(rbenv init -)"' &amp;gt;&amp;gt; $HOME/.bash_profile
RUN rbenv install 2.3.1
RUN rbenv global 2.3.1
ENV PATH /root/.rbenv/shims:$PATH
RUN ruby -v
RUN gem install --no-rdoc --no-ri bundler
RUN rbenv rehash

# copy app， 把代码仓库（github、bitbucket）拉到指定文件夹
RUN mkdir -pv /my_app
WORKDIR /my_app
ADD ./ /my_app/chat
WORKDIR /my_app/chat

RUN bundle install -V

# setting ENV
ENV RACK_ENV="production" RAILS_ENV="production"

# 为安全考量在运行时才产生 SECRET KEY，而不是一开始就设定在相关 yaml 文档里并 push 到公开仓库（本人在 github 上只有公开仓库= =）
ENV SECRET_KEY_BASE $(rails secret)
ENV DEVISE_SECRET_KEY $(rails secret)

# 给 start.sh 执行权限
RUN chmod 777 start.sh

RUN rails assets:precompile
EXPOSE 80

CMD ["sh", "/my_app/chat/start.sh"]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有了上述的 Dockerfile，将它放在项目的根目录下（DaoCloud 预设 Dockerfile 放在根目录，也可以自己指定）。&lt;/p&gt;

&lt;p&gt;然后我们就可以据此部署我们的应用了：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;将本地代码 push 到远端仓库&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;登录 DaoCloud 后点击 &lt;em&gt;代码构建&lt;/em&gt;，并 &lt;em&gt;创建新项目&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;填入项目名称，并指定远端仓库的源代码，此时需要连接你的 Github 或相关账号&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;之后选择执行环境等。P.S.：根据我的个人经验（可能不具普适性），执行环境选国外比较好，速度差别还是挺大的&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接着点击&lt;em&gt;开始创建&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建结束并不会马上执行，预设触发规则是在 git 提交 tag 的后根据根目录下的 Dockerfile（可在流程定义里更改路径） 进行构建（可在触发规则下进行修改），如执行下列命令将会创建相应 tag 的镜像：&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git tag -a v1.0.0 -m &lt;span class="s1"&gt;'version 1.0.0'&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;git push origin master --tags
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;镜像构建完成后（时间不定，与执行环境的选择有关），就可根据该进项创建新应用。点击&lt;em&gt;应用列表&lt;/em&gt;，并&lt;em&gt;创建应用&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择创建成功的镜像进行部署&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于这个项目中使用到 Postgresql 和 Redis，可以先在&lt;em&gt;服务集成&lt;/em&gt;中创建相应的服务（此处是 Postgresql 和 Redis）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在应用部署中需要在配置里绑定相应服务（此处是刚刚创建的两个服务）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;此时会生成相应服务的环境变量，这些环境变量可以直接在源代码里通过 &lt;code&gt;ENV[&amp;#39;xxx&amp;#39;]&lt;/code&gt; 进行引用；同时也可手动创建环境变量方便项目使用（比如在 cable.yml 中 Redis 所需的 url 可根据服务所提供的 Redis 相关数据进行组合并赋值给手动创建的环境变量
REDIS_URL，然后直接 yaml 文档中以 &lt;code&gt;&amp;lt;%= ENV[&amp;#39;REDIS_URL&amp;#39;] =&amp;gt;&lt;/code&gt; 的方式使用）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完成这些设定后（有些细节设定根据自己需求进行选择）即可进行部署&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署完成后应用的启动命令是 Dockerfile 中 CMD，在本例中是执行 &lt;em&gt;start.sh&lt;/em&gt;，可在该脚本中执行 rails 的相关命令，如 &lt;code&gt;rails db:migrate&lt;/code&gt; 或 启动服务器（如 puma）等&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述就是整个部署的大致过程，部署成功后会得到一个 DaoCloud 提供的二级域名，如果需要可自己绑定顶级域名，然后就可根据域名进行访问啦！&lt;/p&gt;

&lt;h3&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ruby-china.org/topics/26313"&gt;在 DaoCloud 上部署 Rails App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>About-Git</title>
    <link rel="alternate" href="http://lafwind.github.io/blog/about-git.html"/>
    <id>http://lafwind.github.io/blog/about-git.html</id>
    <published>2016-05-23T23:09:00+08:00</published>
    <updated>2016-06-07T22:19:54+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;平时写代码都用 &lt;strong&gt;Git&lt;/strong&gt; 管理版本。但之前一直秉承着够用就好的态度，所以也没有太深入，这段时间刚好看了些资料，才发现有时 git 用得卡手，主要是自己姿势不对。介于这番‘大彻大悟’，决定好好总结一下对于 git 的使用。&lt;/p&gt;

&lt;h3&gt;git add&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git add&lt;/code&gt; 应该是平日里用得最多的命令。之前一直是都是完成一个 feature 或修复一个 bug 后，来个 &lt;code&gt;git add -A&lt;/code&gt; 或 &lt;code&gt;git add filename&lt;/code&gt;，然后就直接 commit。这应该是最一般的流程。但有时也会遇到在完成一个 feature 时，顺便把一个 bug 解决了，这是如果要 commit 的话，就尴尬了。因为如果一下全部 commit 的话，破坏了‘小步快跑’的开发模式，对之后代码的维护不好。当然也可以把修复 bug 的代码改回来（&lt;code&gt;git checkout filename&lt;/code&gt; 此处可用，它能取消文件变更，回到没修改前的状态），先把 feature 提交了，再来 commit 修复 bug 的代码，这样虽然可以解决问题，但显得有点笨（‘懒’程序员才是好程序员）。这时候，可以使用 &lt;code&gt;git add -p&lt;/code&gt;，此时会出现命令行相关提示，把还未提交的代码与 staging area 的代码进行 diff，并对每一处 diff 向你询问是否 add。这样的话，你就能把不同功能块的代码分开提交，然后分别 commit。（p.s.： &lt;code&gt;git add file&lt;/code&gt; 那么也可以完成类似工作，但粒度只到文件级别）&lt;/p&gt;

&lt;p&gt;还有，有时我们会不小心把多余的文件 &lt;code&gt;git add&lt;/code&gt;，这时我们需要把它从 staging area（文件分为untracked - git 不知道它的存在、not staged - git 知道它的存在，但它被修改了还未add、staged - 已被 add） 中移除出来，但也不能直接&lt;code&gt;rm file&lt;/code&gt;（文件我们还需要的～）或&lt;code&gt;git rm file&lt;/code&gt;（文件我们还要 track），此时给&lt;code&gt;git rm&lt;/code&gt;加个参数&lt;code&gt;--cached&lt;/code&gt;就能很好的帮我们完成任务。&lt;/p&gt;

&lt;h3&gt;git stash&lt;/h3&gt;

&lt;p&gt;当正在写一个 feature 时，有用户反映一个紧急 bug，必须马上解决。此时就可以使用 &lt;code&gt;git stash&lt;/code&gt; 这个命令，他能把当下未提交的改动暂存到某神秘地方，这样代码库就回到还未更改时的状态，然后就可先解决紧急 bug。当解决完问题后，&lt;code&gt;git stash pop&lt;/code&gt; 就可以恢复之前那些未提交的内容。&lt;/p&gt;

&lt;h3&gt;git commit &amp;ndash;amend&lt;/h3&gt;

&lt;p&gt;当提交完一次 commit 后，发现有个属于该次 commit 的变动未提交，新手的作法一般会是把遗漏的变更提交了，然后再 commit 一次，但是这样前一次的 commit 就不完整了。此时可以在 commit 时使用 &lt;code&gt;git commit --amend&lt;/code&gt;，当命令执行时，会调用默认编辑器（用 &lt;code&gt;git config --global core.editor editor_name&lt;/code&gt; 设置）编辑前一次的 commit message，修改（或不修改）后保存退出，这样就只会 commit 一次，并把忘记提交的代码也提交。&lt;/p&gt;

&lt;p&gt;p.s.: 这个动作会修改 commit id（SHA-1 校验和），如果此时本次 commit 的代码已经推送到服务器，那么服务器信息就会和本地不一致，导致下次 push 出错，所以需谨慎。&lt;/p&gt;

&lt;h3&gt;git reset&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt; 这个命令不仅可以改变 HEAD&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset HEAD&lt;/code&gt; 删除存在于 staging area 中的改动&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset HEAD^&lt;/code&gt; 回到上一个版本，删除当前版本（加 &lt;code&gt;--soft&lt;/code&gt; 参数可以把相应 commit 的内容继续保存在 staging area 中）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还能把文件从 staging area（已经 &lt;code&gt;git add&lt;/code&gt;）移除出来，并且不丢失任何变更： &lt;code&gt;git reset filename&lt;/code&gt;。&lt;/p&gt;

&lt;h3&gt;git branch&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git branch branch_name&lt;/code&gt; 可以用来开新分支，默认是基于最新的一次提交，但也可以在指定类似 &lt;code&gt;HEAD~1&lt;/code&gt; 的参数使其基于某次提交。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -d be_deleted_branch&lt;/code&gt; 可以用来删除分支，毕竟分支太多不好管理。&lt;/p&gt;

&lt;p&gt;p.s.: &lt;code&gt;git branch&lt;/code&gt; 列出所有分支。&lt;code&gt;git checkout branch_name&lt;/code&gt; 用来切换分支。可以直接 &lt;code&gt;git checkout -b branch_name&lt;/code&gt; 来创建分支+切换。&lt;/p&gt;

&lt;h3&gt;git log&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git log&lt;/code&gt; 可以看git的commit记录&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git log branch_name&lt;/code&gt; 可以看某分支的 commit 记录&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git log branch_name -p filename&lt;/code&gt; 可以看 branch_name 分支上有关 filename 文件的 log&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt; 可以用简短模式看 log&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;git diff&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git diff&lt;/code&gt; 用来查看 unstage 和 stage 的 diff&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git diff --cached&lt;/code&gt; 用来查看 stage 和已 commit 的 diff&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;git cherry-pick&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git cherry-pick commit_id&lt;/code&gt;，其中 commit_id 是某次 commit 的 SHA-1 校验和。这个命令可以把某 commit 摘出来，合并到当前分支。&lt;/p&gt;

&lt;h3&gt;git reflog&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt; 可以查看在版本库上的操作，配合 &lt;code&gt;git cherry-pick&lt;/code&gt;，可以把扔掉的 commit 重新捡回来～&lt;/p&gt;

&lt;h4&gt;git rebase&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git rebase master feature&lt;/code&gt; 可以把 feature 分支 rebase 到 master 分支上。这个命令和 &lt;code&gt;git merge&lt;/code&gt; 的区别可透过下面例子说明：&lt;/p&gt;

&lt;p&gt;B 分支是基于 A 分支创建，假设现在处于 C1 这个 commit，之后两个分支分别又进行了两次 commit，此时 A 为 C1 -&amp;gt; C2 -&amp;gt; C3， B 为 C1 -&amp;gt; C4 -&amp;gt; C5：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果 &lt;code&gt;git rebase A B&lt;/code&gt; 或 &lt;code&gt;git checkout B + git rebase A&lt;/code&gt;，这些命令会把 B 中的每个 commit（C4，C5）取消掉，并把它们临时保存为补丁（C4&amp;#39;、C5&amp;rsquo;,在 .git/rebase 目录中），再把 B 分支更新为最新的 A 分支，最后再把保存的补丁（C4&amp;#39;， C5&amp;#39;）应用到 A 分支上。所以此时 commit 的顺序从新到旧应该是：C5&amp;rsquo; -&amp;gt; C4&amp;rsquo; -&amp;gt; C3 -&amp;gt; C2 -&amp;gt; C1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果 &amp;lsquo;git merge &amp;#39;，不会有上述的过程，commit 的顺序也按照C1、C2、C3、C4、C5提交的时间来定。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git rebase -i HEAD~n&lt;/code&gt;这个命令会打开编辑器，前 n 行为最近 n 次的 commit 记录，类似&lt;strong&gt;pick a666666 commit_message&lt;/strong&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调换行的内容可以调换提交顺序&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把 某次 commit 的 &lt;strong&gt;&lt;u&gt;pick&lt;/u&gt;&lt;/strong&gt; 该为 &lt;strong&gt;&lt;u&gt;r&lt;/u&gt;&lt;/strong&gt;（reword），保存退出再重新进入编辑器，此时可以更改 commit 信息（p.s.：当次修改以及介于修改之间的 commit id 都重新计算）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把 某次 commit 的 &lt;strong&gt;&lt;u&gt;pick&lt;/u&gt;&lt;/strong&gt; 该为 &lt;strong&gt;&lt;u&gt;s&lt;/u&gt;&lt;/strong&gt;（squash），保存退出再重新进入编辑器，此时可以把该次 commit 合并到它的前一个 commit，并可修改 commit message。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;git clean&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git clean -n&lt;/code&gt; 列出有将要被删除的未被追踪的文件或资料夹，不包括 .gitignore 里的文件。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git clean -fd&lt;/code&gt; 删除未被追踪的文件或资料夹，不包括 .gitignore 里的文件。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;git merge&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git merge branch_name --squash&lt;/code&gt; + &lt;code&gt;git commit -m &amp;#39;merge branch_name&amp;#39;&lt;/code&gt; 可以把一个分支合并到当前分支，并且重新写 commit message（当前分支只有这个 commit message）。&lt;/p&gt;

&lt;h3&gt;协作&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git remote add origin url&lt;/code&gt; 添加 remote repo。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git remote&lt;/code&gt; 可以列出当前的 remote repo，加个参数 &lt;code&gt;-v&lt;/code&gt;即&lt;code&gt;git remote -v&lt;/code&gt;可以获得 remote repo 的 URL。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git pull origin master&lt;/code&gt; 把别人提交的代码拉到本地。（可添加 &lt;code&gt;--rebase&lt;/code&gt; 参数，该参数效果同 &lt;code&gt;git rebase&lt;/code&gt;）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git push origin branch_name&lt;/code&gt; 把 branch_name 上提交的代码 push 到远程仓库。（有时可以把一些还不能并入主分支的代码提交到远程给别人 review）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git fetch origin&lt;/code&gt; 取得远程仓库的更新，但并不会合并到本地仓库。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git revert commit_id&lt;/code&gt; 可以把 push 到远程的有问题的 commit 恢复。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;git grep&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git grep &amp;quot;TODO&amp;quot;&lt;/code&gt; 可以把编码过程中注释的 TODO 列出来。&lt;/p&gt;

&lt;h3&gt;git blame filename&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git blame filename&lt;/code&gt; 可以找到文件某行代码的最后修改者～&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Webpack Tutorial</title>
    <link rel="alternate" href="http://lafwind.github.io/blog/the-webpack-tutorial.html"/>
    <id>http://lafwind.github.io/blog/the-webpack-tutorial.html</id>
    <published>2015-11-05T23:10:00+08:00</published>
    <updated>2016-06-12T16:24:57+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;坑～&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2015下半年计划</title>
    <link rel="alternate" href="http://lafwind.github.io/blog/the-second-half-of-2015.html"/>
    <id>http://lafwind.github.io/blog/the-second-half-of-2015.html</id>
    <published>2015-07-03T20:44:00+08:00</published>
    <updated>2015-07-06T16:00:54+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;2015年又过去了一半，时间的转瞬即逝让人有点措手不及……&lt;/p&gt;

&lt;p&gt;由于开始写博客时，2015年已经过去了几个月，无法赶潮流的写一篇2014总结及2015展望，所以趁着半年之际，也来过过这把隐～刚过去的半年，对我而言，平常却不平凡，等收拾好心情再来总结；而对即将到来的日子，计划如下：&lt;/p&gt;

&lt;h3&gt;技术方面&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ruby/Ruby on Rails：毫无疑问地继续深入学习Ruby和Rails，扎实基础、提高水平。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前端：HTML（haml）和CSS（Sass）继续学习及应用。Js系语言还有不足。虽然经常在Youtube上看JavaScript和JQuery的教程，然而道理我都懂，但是缺少实践啊！下半年认真巩固Js方面的基础；学习CoffeeScript，读完《深入浅出CoffeeScript》并完成书上例子；继续学习AngularJs，虽然之前有用过AngularJs完成一个小应用，但由于AngularJs2相对于AngularJs1存在较大变更，就暂缓了学习进度，下半年继续（同时关注&lt;a href="http://www.ionicframework.com/"&gt;Ionic框架&lt;/a&gt;）；关注&lt;a href="http://facebook.github.io/react/"&gt;React&lt;/a&gt;。总之，学习、实践！&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lisp/Rust/Node。看&lt;a href="https://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;SICP&lt;/a&gt;，学习Lisp(scheme)，学习Functional Programming。四月份的时候看&lt;a href="https://www.youtube.com/playlist?list=PL26Nnis8vxRjnirJl1YvHkB8Wyn-WLeDF"&gt;SICP的配套视频课程&lt;/a&gt;，可惜由于一些事情中断了，下半年继续。对Rust、Node持续关注。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据库：深入学习一种关系数据库（如PostgreSql）；读《Redis设计与实现》，继续将Redis应用到项目中；如有时间，可尝试学习另一种非关系型数据库。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;测试：虽然自己也在一些小项目中尝试用Minitest来写测试，但还用得太少。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他：根据需要进行学习，并保持足够想象空间～&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;读书&lt;/h3&gt;

&lt;p&gt;除了上述列出的相关技术的书籍外，还希望自己在其他方面也有所涉略&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设计：《写给大家看的设计书》、《认知与设计：理解UI设计准则》等&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人文社科：《编码》、《失控》、人文历史方面的书籍等&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;运动&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;跑步，答应某同学的话一定会做到的！&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看着上面列出的这么一大串内容（其实还有更多 = =，毕竟自己是个兴趣广泛的人 = =，但现阶段还是希望能把精力集中在某些方面！），真心感觉时间不够用……加油吧！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails 中的 cache（一）</title>
    <link rel="alternate" href="http://lafwind.github.io/blog/cache-in-rails.html"/>
    <id>http://lafwind.github.io/blog/cache-in-rails.html</id>
    <published>2015-06-22T23:52:00+08:00</published>
    <updated>2015-06-25T00:54:18+08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;其实，写这篇文章，自己有点心虚……首先，内容有点大；其次，我几乎没有在Rails中使用cache的经验= =，因为项目还没有这个需要T.T（Donald Knuth曾说过“过早的优化是万恶之源”，这是自我安慰吗～？），但是由于这几天都在看有关优化方面的内容，比如 &lt;a href="http://thenewstack.io/how-to-write-ruby-faster-at-the-source-code-level/"&gt;How To Write Ruby Faster at the Source Code Level&lt;/a&gt;，&lt;a href="https://github.com/JuanitoFatas/fast-ruby"&gt;fast-ruby&lt;/a&gt; 以及cache相关的内容，所以就想把相关内容记录下来，以备将来之需！&lt;/p&gt;

&lt;p&gt;p.s.：之所以在未经充分实践就把文章写下来的最主要原因是：平时自己就喜欢乱看东西，比如曾经看了haskell，go等，但由于没有实践，现在都差不多忘了，以至于白白浪费了之前的学习，为了避免重蹈覆辙，决定把学到的东西（不管开始用没）记录下来，当之后用到时也能通过这些文章更快地进入状态，这也是我之前说的想要写博客的原因之一；而这也从另一方面督促自己，还有很多东西没做呢！要把时间花在刀刃上！&lt;/p&gt;

&lt;p&gt;言归正传，就如上文所说，cache的内容有点多，有服务器端的、客户端的及一些页面相关的，在此次文章中，我主要想看看rails中的&lt;a href="http://guides.rubyonrails.org/caching_with_rails.html"&gt;Fragment Caching&lt;/a&gt;。这种缓存是把视图逻辑中的一部分打包到cache块中，之后的请求就会从缓存中取得这部分的内容。比如在一个图片网站中（像&lt;a href="https://impage.herokuapp.com/"&gt;Impage&lt;/a&gt; ; )），一般情况，图片的内容是不会变的，但是评论的内容则会慢慢增加，这种情况下，就可以将图片部分的相关视图缓存起来，而不用每次都像数据库发出请求，以此提高速度。代码方面如下：&lt;/p&gt;
&lt;pre class="highlight haml"&gt;&lt;code&gt;# example
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;%p&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt;
  &lt;span class="nt"&gt;%span&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tag_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;tag: &lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"btn"&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_tag&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:large&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;%p&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面是一个使用fragment caching的例子，而cache[@post]会生成类似下列的key：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/posts/3-20150616162219&lt;/code&gt;，这个键包含模型名，post的id和最后更新时间updated_at，所以当post出现更新时（即updated_at更改），这个post才会生成一个新的缓存，而旧的缓存就不再管理，等到缓存满了后会利用LRU自动清理。&lt;/p&gt;

&lt;p&gt;除了上述的自动更新缓存外，也可以利用&lt;code&gt;expire_fragment&lt;/code&gt;方法来手动清除缓存。&lt;/p&gt;

&lt;p&gt;以上是fragment cache的一些基本内容。试想在这样一种情况下：缓存了一个大页面，此时有一个小小的section更新了，那么这个大页面的缓存也必须得更新，这样显然降低了效率。应对这种情况，rails提供了嵌套方式来重用缓存，如：&lt;/p&gt;
&lt;pre class="highlight haml"&gt;&lt;code&gt;# example 伪代码
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样当有一个post更新时，就仅更新该post的缓存，然后重新和其他post的缓存（沿用之前的）拼接，提高了效率，这种机制称为Russian Doll机制（套娃机制）。而在1:1或1：n（belongs_to）的情况下，比如：&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
    &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:list&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时，在item更新时，并不会提示list的缓存也更新，解决的方法是利用touch属性：&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Activerecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
    &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;touch: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，当item更新，list也会跟着更新，有关套娃机制的内容，请参看Ruby-China上的&lt;a href="https://ruby-china.org/topics/21488"&gt;说说 Rails 的套娃缓存机制&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;上述就是这两天对于fragment cache的学习，之后会对其进行实践，如有新的理解，会接着更新。而后续也会对其他cache进行学习。&lt;/p&gt;
</content>
  </entry>
</feed>
